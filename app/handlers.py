import os
from pathlib import Path
from typing import Dict, Optional, Any

from aiogram import Router, F, types, html
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from datetime import datetime

from .models import ActData, ActItem, UserContext
from .parser import ActParser, clean_text
from .docgen import generate_act_document
from .preview import format_act_preview
from .template_utils import ensure_template_exists, create_default_template, is_valid_docx
from .config import (
    TEMPLATES_DIR, OUTPUT_DIR, get_main_keyboard, 
    get_cancel_keyboard, get_confirm_keyboard, LOGS_DIR
)
from .logger import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
from .states import BotStates

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
for directory in [TEMPLATES_DIR, OUTPUT_DIR, LOGS_DIR]:
    try:
        directory.mkdir(parents=True, exist_ok=True)
        logger.info(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}: OK')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}: {e}')
        raise

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_contexts: Dict[int, UserContext] = {}


def get_user_context(user_id: int) -> UserContext:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if user_id not in user_contexts:
        user_contexts[user_id] = UserContext()
    return user_contexts[user_id]


async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user.id}) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º')
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_main_keyboard()
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    logger.debug(f"Created main keyboard: {keyboard}")
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–æ–≤.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∞–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "#–ê–ö–¢ 10.06.2025 | –û–±—ä–µ–∫—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞\n"
        "–ø–æ–¥—Ä–æ–∑–µ—Ç–Ω–∏–∫–∏ 30√ó40‚ÇΩ\n"
        "–∫–∞–±–µ–ª—å 45 –º √ó 25‚ÇΩ",
        reply_markup=keyboard
    )


async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìù <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∞–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>#–ê–ö–¢ 10.06.2025 | –û–±—ä–µ–∫—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞\n"
        "–ø–æ–¥—Ä–æ–∑–µ—Ç–Ω–∏–∫–∏ 30√ó40‚ÇΩ\n"
        "–∫–∞–±–µ–ª—å 45 –º √ó 25‚ÇΩ</code>\n\n"
        "2. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é\n"
        "3. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π –∞–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    
    await message.answer(help_text, parse_mode='HTML')


async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    user = message.from_user
    user_ctx = get_user_context(user.id)
    user_ctx.reset()
    
    await state.finish()
    await message.answer(
        '–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?',
        reply_markup=get_main_keyboard()
    )
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ')


async def handle_act_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∞–∫—Ç–∞"""
    user = message.from_user
    user_ctx = get_user_context(user.id)
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞–∫—Ç
        act_data = ActParser.parse_act(message.text)
        logger.info(f'–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {act_data}')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_ctx.current_act = act_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        preview = format_act_preview(act_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = get_confirm_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        sent_message = await message.answer(
            f'üîç <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∞:</b>\n\n{preview}',
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_ctx.last_message_id = sent_message.message_id
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.set_state(BotStates.waiting_for_confirmation)
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}')
        
    except Exception as e:
        error_msg = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫—Ç–∞: {str(e)}'
        logger.error(error_msg, exc_info=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_details = (
            '‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∞–∫—Ç–∞!</b>\n\n'
            f'<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {str(e)}\n\n'
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n'
            '<b>–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:</b>\n'
            '<code>#–ê–ö–¢ 10.06.2025 | –û–±—ä–µ–∫—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞\n'
            '–ø–æ–¥—Ä–æ–∑–µ—Ç–Ω–∏–∫–∏ 30√ó40‚ÇΩ\n'
            '–∫–∞–±–µ–ª—å 45 –º √ó 25‚ÇΩ</code>\n\n'
            '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å "–ø–æ":\n'
            '<code>3 –∫–∞–º–µ—Ä—ã –ø–æ 2000‚ÇΩ\n'
            '—Å—Ç–æ–π–∫–∞, 18 –º–æ–¥—É–ª–µ–π –ø–æ 1000‚ÇΩ</code>\n\n'
            '<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.</i>'
        )
        
        await message.answer(error_details, parse_mode='HTML')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard = get_cancel_keyboard()
        await message.answer("–ù–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)


async def handle_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞"""
    user = message.from_user
    user_ctx = get_user_context(user.id)
    logger.info(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}. –¢–µ–∫—É—â–∏–π –∞–∫—Ç: {user_ctx.current_act is not None}')
    
    if not user_ctx.current_act:
        error_msg = '–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        logger.error(error_msg)
        await message.answer(
            '‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
            reply_markup=get_main_keyboard()
        )
        await state.finish()
        return
    
    if message.text == '‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç':
        loading_msg = await message.answer('üîÑ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–∫—Ç–∞...</b>', parse_mode='HTML')
        
        try:
            logger.info(f'–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}. –î–∞–Ω–Ω—ã–µ: {user_ctx.current_act}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            template_path = ensure_template_exists()
            logger.info(f'–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —à–∞–±–ª–æ–Ω: {template_path.absolute() if template_path else "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"}')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = int(datetime.now().timestamp())
            doc_filename = f'–ê–∫—Ç_–æ—Ç_{user_ctx.current_act.date.strftime("%d.%m.%Y")}_{timestamp}.docx'
            doc_path = OUTPUT_DIR / doc_filename
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                logger.info(f'–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –®–∞–±–ª–æ–Ω: {template_path}, –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {doc_path}')
                
                doc_path = generate_act_document(
                    act_data=user_ctx.current_act,
                    template_path=template_path,
                    output_path=doc_path
                )
                
                logger.info(f'–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {doc_path.absolute()}')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                logger.info(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {doc_path.absolute()}')
                if not doc_path.exists():
                    error_msg = f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_path.absolute()}'
                    logger.error(error_msg)
                    raise FileNotFoundError(error_msg)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = doc_path.stat().st_size
                logger.info(f'–†–∞–∑–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç')
                
                if file_size == 0:
                    error_msg = f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç: {doc_path.absolute()}'
                    logger.error(error_msg)
                    raise IOError(error_msg)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                logger.info(f'–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {doc_filename} ({file_size} –±–∞–π—Ç)')
                await message.answer_document(
                    document=FSInputFile(doc_path, filename=doc_filename),
                    caption='‚úÖ <b>–ê–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>',
                    parse_mode='HTML',
                    reply_markup=get_main_keyboard()
                )
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –∞–∫—Ç: {doc_path.absolute()}')
                
            except ValueError as e:
                logger.error(f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞: {str(e)}', exc_info=True)
                await message.answer(
                    f'‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞:</b> {str(e)}\n\n'
                    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    parse_mode='HTML',
                    reply_markup=get_main_keyboard()
                )
            except IOError as e:
                logger.error(f'–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞: {str(e)}', exc_info=True)
                await message.answer(
                    '‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∞–∫—Ç–∞.</b>\n\n'
                    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
                    parse_mode='HTML',
                    reply_markup=get_main_keyboard()
                )
            except Exception as e:
                logger.error(f'–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞: {str(e)}', exc_info=True)
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                    doc = Document()
                    doc.add_heading('–ê–ö–¢ –í–´–ü–û–õ–ù–ï–ù–ù–´–• –†–ê–ë–û–¢', 0)
                    doc.add_paragraph(f'–î–∞—Ç–∞: {user_ctx.current_act.date.strftime("%d.%m.%Y")}')
                    doc.add_paragraph(f'–û–±—ä–µ–∫—Ç: {user_ctx.current_act.object_name}')
                    doc.add_paragraph()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
                    table = doc.add_table(rows=1, cols=5, style='Table Grid')
                    table.cell(0, 0).text = '‚Ññ'
                    table.cell(0, 1).text = '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'
                    table.cell(0, 2).text = '–ö–æ–ª-–≤–æ'
                    table.cell(0, 3).text = '–ï–¥.'
                    table.cell(0, 4).text = '–°—É–º–º–∞, ‚ÇΩ'
                    
                    for idx, item in enumerate(user_ctx.current_act.items, 1):
                        row = table.add_row().cells
                        row[0].text = str(idx)
                        row[1].text = item.name
                        row[2].text = str(item.quantity)
                        row[3].text = item.unit
                        row[4].text = f"{item.total:.2f}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
                    doc.add_paragraph()
                    doc.add_paragraph(f'–ò—Ç–æ–≥–æ: {user_ctx.current_act.total:.2f} ‚ÇΩ')
                    doc.add_paragraph('–ë–µ–∑ –ù–î–°')
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                    doc.save(doc_path)
                    logger.info(f'–°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {doc_path.absolute()}')
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await message.answer_document(
                        document=FSInputFile(doc_path, filename=doc_filename),
                        caption='‚úÖ <b>–ê–∫—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ.</b>',
                        parse_mode='HTML',
                        reply_markup=get_main_keyboard()
                    )
                    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ª—É—á–∏–ª —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–∫—Ç: {doc_path.absolute()}')
                    
                except Exception as inner_e:
                    logger.error(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(inner_e)}', exc_info=True)
                    raise Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.')
        finally:
            # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            try:
                user_ctx.reset()
                await state.finish()
                logger.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Å–±—Ä–æ—à–µ–Ω–æ')
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}', exc_info=True)
        
    elif message.text == 'üîÅ –ò–∑–º–µ–Ω–∏—Ç—å / –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∞')
        await message.answer(
            '–•–æ—Ä–æ—à–æ, –ø—Ä–∏—à–ª–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–∫—Ç–∞:',
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(BotStates.waiting_for_act)
        logger.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_for_act')


def setup_routers() -> Router:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–æ—É—Ç–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"""
    router = Router()
    
    # –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
    router.message.register(cmd_start, Command("start"))
    router.message.register(cmd_help, Command("help"))
    router.message.register(cmd_cancel, Command("cancel"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    router.message.register(
        handle_act_text, 
        F.text,
        StateFilter(BotStates.waiting_for_act)
    )
    router.message.register(
        handle_confirmation,
        F.text,
        StateFilter(BotStates.waiting_for_confirmation)
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    @router.message(F.text == "–ü–æ–º–æ—â—å")
    async def help_button(message: types.Message):
        await cmd_help(message)
    
    @router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∞–∫—Ç")
    async def create_act_button(message: types.Message, state: FSMContext):
        try:
            logger.info(f"–ö–Ω–æ–ø–∫–∞ '–°–æ–∑–¥–∞—Ç—å –∞–∫—Ç' –Ω–∞–∂–∞—Ç–∞. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
            await message.answer(
                "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∞–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "#–ê–ö–¢ 10.06.2025 | –û–±—ä–µ–∫—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞\n"
                "–ø–æ–¥—Ä–æ–∑–µ—Ç–Ω–∏–∫–∏ 30√ó40‚ÇΩ\n"
                "–∫–∞–±–µ–ª—å 45 –º √ó 25‚ÇΩ",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(BotStates.waiting_for_act)
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {await state.get_state()}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ create_act_button: {str(e)}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return False
    
    @router.message(F.text == "–û—Ç–º–µ–Ω–∞")
    async def cancel_button(message: types.Message, state: FSMContext):
        await cmd_cancel(message, state)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    @router.message(F.text)
    async def handle_text(message: types.Message, state: FSMContext):
        try:
            if message.text.startswith('/'):
                await cmd_start(message)
                return
                
            current_state = await state.get_state()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text[:100]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–∫—Ç (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å #–ê–ö–¢)
            if message.text.strip().startswith('#–ê–ö–¢'):
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –∞–∫—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                await state.set_state(BotStates.waiting_for_act)
                await handle_act_text(message, state)
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            current_state = await state.get_state()
            if current_state == BotStates.waiting_for_act:
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –∞–∫—Ç")
                await handle_act_text(message, state)
            elif current_state == BotStates.waiting_for_confirmation:
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
                await handle_confirmation(message, state)
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ —Ç–µ–∫—Å—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –∞–∫—Ç
            elif any(x in message.text.lower() for x in ['√ó', 'x', '*', '—à—Ç', '–º', '—Ä', '—Ä—É–±']):
                logger.info("–¢–µ–∫—Å—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –∞–∫—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                await state.set_state(BotStates.waiting_for_act)
                await handle_act_text(message, state)
            # –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
            else:
                await cmd_help(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {str(e)}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @router.message()
    async def unknown_message(message: types.Message):
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. "
            "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
    
    return router